{"version":3,"file":"4.SkDOlMmq.js","sources":["../../../../../../src/routes/admin/satisfactory-versions/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { getContextClient, queryStore } from '@urql/svelte';\n  import {\n    CreateSatisfactoryVersionDocument,\n    DeleteSatisfactoryVersionDocument,\n    GetSatisfactoryVersionsDocument,\n    UpdateSatisfactoryVersionDocument,\n    type GetSatisfactoryVersionsQuery\n  } from '$lib/generated';\n  import { Accordion, AccordionItem, getToastStore } from '@skeletonlabs/skeleton';\n\n  type SatisfactoryVersion = GetSatisfactoryVersionsQuery['getSatisfactoryVersions'][number];\n\n  const client = getContextClient();\n\n  const panels = {};\n  const versionFields = {};\n\n  const satisfactoryVersionsQuery = queryStore({\n    query: GetSatisfactoryVersionsDocument,\n    client\n  });\n\n  $: satisfactoryVersions = $satisfactoryVersionsQuery.data?.getSatisfactoryVersions || [];\n\n  const toastStore = getToastStore();\n\n  function newSatisfactoryVersion() {\n    if (!satisfactoryVersions.find((satisfactoryVersion) => satisfactoryVersion.id < 0)) {\n      const satisfactoryVersion = { id: -1, version: 0, engine_version: '4.26' } as SatisfactoryVersion;\n      satisfactoryVersions.push(satisfactoryVersion);\n      satisfactoryVersions = satisfactoryVersions;\n      setTimeout(() => {\n        panels[satisfactoryVersion.id].setOpen(true);\n        const field = versionFields[satisfactoryVersion.id];\n        field.focus();\n        const input = field.getElement().querySelectorAll('input')[0] as HTMLInputElement;\n        input.select();\n      }, 0);\n    } else {\n      panels[satisfactoryVersions[satisfactoryVersions.length - 1].id].setOpen(true);\n      versionFields[satisfactoryVersions[satisfactoryVersions.length - 1].id].focus();\n    }\n  }\n\n  async function satisfactoryVersionChange(satisfactoryVersion: SatisfactoryVersion) {\n    if (satisfactoryVersion.version === 0) {\n      return;\n    }\n\n    console.log(satisfactoryVersion);\n\n    let success = false;\n    if (satisfactoryVersion.id < 0) {\n      // Create new satisfactory version & update satisfactoryVersion.id with new DB id or re-fetch all satisfactory versions\n      try {\n        const result = await client\n          .mutation(CreateSatisfactoryVersionDocument, {\n            satisfactoryVersion: {\n              version: satisfactoryVersion.version,\n              engine_version: satisfactoryVersion.engine_version\n            }\n          })\n          .toPromise();\n        if (result.data) {\n          satisfactoryVersion.id = result.data.createSatisfactoryVersion.id;\n          success = true;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to create Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    } else {\n      // Update existing satisfactory version\n      try {\n        success =\n          (\n            await client\n              .mutation(UpdateSatisfactoryVersionDocument, {\n                id: satisfactoryVersion.id,\n                satisfactoryVersion: {\n                  version: satisfactoryVersion.version,\n                  engine_version: satisfactoryVersion.engine_version\n                }\n              })\n              .toPromise()\n          ).data.updateSatisfactoryVersion != null;\n      } catch {\n        // nothing\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to update Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    }\n\n    toastStore.trigger({\n      message: `Satisfactory version '${satisfactoryVersion.version}' saved!`,\n      background: 'variant-filled-success',\n      timeout: 2000\n    });\n  }\n\n  async function deleteSatisfactoryVersion(satisfactoryVersion: SatisfactoryVersion) {\n    if (!(satisfactoryVersion.id < 0)) {\n      // Remove satisfactory version\n      let success = false;\n      try {\n        const result = await client\n          .mutation(DeleteSatisfactoryVersionDocument, { satisfactoryVersionID: satisfactoryVersion.id })\n          .toPromise();\n        success = result.data.deleteSatisfactoryVersion;\n        if (success) {\n          satisfactoryVersions = satisfactoryVersions.filter((version) => version.id !== satisfactoryVersion.id);\n        }\n      } catch {\n        success = false;\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to remove Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    }\n\n    toastStore.trigger({\n      message: `Satisfactory version '${satisfactoryVersion.version}' removed!`,\n      background: 'variant-filled-success',\n      timeout: 2000\n    });\n  }\n\n  function onDeleteClick(e: Event, satisfactoryVersion: SatisfactoryVersion) {\n    e.stopPropagation();\n    deleteSatisfactoryVersion(satisfactoryVersion);\n  }\n</script>\n\n<div class=\"card\">\n  {#if $satisfactoryVersionsQuery.fetching}\n    <h1>Loading satisfactory versions...</h1>\n  {:else if $satisfactoryVersionsQuery.error}\n    <h1>Failed to load satisfactory versions: {$satisfactoryVersionsQuery.error.message}</h1>\n  {:else}\n    <Accordion>\n      {#each satisfactoryVersions as satisfactoryVersion}\n        <AccordionItem>\n          <svelte:fragment slot=\"summary\">{satisfactoryVersion.version}</svelte:fragment>\n          <svelte:fragment slot=\"content\">\n            <div>\n              <input\n                type=\"text\"\n                class=\"input p-2\"\n                bind:value={satisfactoryVersion.version}\n                placeholder=\"Version\"\n                bind:this={versionFields[satisfactoryVersion.id]}\n                on:change={() => satisfactoryVersionChange(satisfactoryVersion)} />\n\n              <input\n                type=\"text\"\n                class=\"input p-2\"\n                bind:value={satisfactoryVersion.engine_version}\n                placeholder=\"Engine version\"\n                on:change={() => satisfactoryVersionChange(satisfactoryVersion)} />\n            </div>\n\n            <button class=\"variant-ghost-error btn\" on:click={(e) => onDeleteClick(e, satisfactoryVersion)}>\n              <span>Delete</span>\n            </button>\n          </svelte:fragment>\n        </AccordionItem>\n      {/each}\n    </Accordion>\n\n    <section class=\"p-4\">\n      <button class=\"variant-ghost-primary btn\" on:click={newSatisfactoryVersion}>\n        <span>Add new Satisfactory version</span>\n        <span class=\"material-icons\">add</span>\n      </button>\n    </section>\n  {/if}\n</div>\n"],"names":["insert_hydration_dev","target","section","anchor","append_hydration_dev","button","span0","span1","ctx","error","message","h1","set_data_dev","t1","t1_value","t_value","version","dirty","t","div","input0","set_input_value","input1","engine_version","span","value","length","i","each_blocks","fetching","client","getContextClient","panels","versionFields","satisfactoryVersionsQuery","queryStore","query","GetSatisfactoryVersionsDocument","toastStore","getToastStore","newSatisfactoryVersion","satisfactoryVersions","find","satisfactoryVersion","id","setOpen","focus","push","setTimeout","field","getElement","querySelectorAll","select","async","satisfactoryVersionChange","console","log","success","result","mutation","CreateSatisfactoryVersionDocument","toPromise","data","createSatisfactoryVersion","err","trigger","background","timeout","UpdateSatisfactoryVersionDocument","updateSatisfactoryVersion","deleteSatisfactoryVersion","DeleteSatisfactoryVersionDocument","satisfactoryVersionID","$$invalidate","filter","onDeleteClick","e","stopPropagation","this","$$value","change_handler","change_handler_1","click_handler","$satisfactoryVersionsQuery","getSatisfactoryVersions"],"mappings":"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"}