{"version":3,"file":"markdown.BVull9Ut.js","sources":["../../../../../../src/lib/utils/markdown.ts"],"sourcesContent":["import DOMPurify from 'dompurify';\nimport { marked } from 'marked';\nimport { mangle } from 'marked-mangle';\nimport { gfmHeadingId } from 'marked-gfm-heading-id';\nimport { browser } from '$app/environment';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-c.js';\nimport 'prismjs/components/prism-cpp.js';\nimport 'prismjs/components/prism-lua.js';\nimport 'prismjs/components/prism-javascript.js';\nimport 'prismjs/components/prism-json.js';\nimport 'prismjs/components/prism-python.js';\nimport 'prismjs/components/prism-markdown.js';\nimport 'prismjs/components/prism-markup.js';\n\nmarked.use(gfmHeadingId(), mangle());\n\nlet resolver;\nconst sanitizer = new Promise<(string) => string>((r) => (resolver = r));\n\nif (!browser) {\n  (async () => {\n    const { JSDOM } = await import('jsdom');\n    resolver(DOMPurify(new JSDOM('').window).sanitize);\n  })();\n} else {\n  resolver(DOMPurify.sanitize);\n}\n\nexport const markdown = (md: string, inline = false): Promise<string> =>\n  sanitizer.then((s) => {\n    const sanitized = s(inline ? marked.parseInline(md) : marked(md));\n    const parsed = new DOMParser().parseFromString(sanitized, 'text/html');\n    Prism.highlightAllUnder(parsed.body);\n    return parsed.body.innerHTML;\n  });\n"],"names":["marked","use","gfmHeadingId","mangle","resolver","sanitizer","Promise","r","DOMPurify","sanitize","markdown","md","inline","then","s","sanitized","parseInline","parsed","DOMParser","parseFromString","Prism","highlightAllUnder","body","innerHTML"],"mappings":"qEAeAA,EAAOC,IAAIC,EAAgBC,EAAAA,EAAAA,CAAAA,EAE3B,IAAIC,EACJ,MAAMC,EAAY,IAAIC,QAA6BC,GAAOH,EAAWG,CAAAA,EAQnEH,EAASI,EAAUC,QAAAA,EAGR,MAAAC,EAAW,CAACC,EAAYC,EAAS,KAC5CP,EAAUQ,KAAMC,GACR,CAAA,MAAAC,EAAYD,EAAEF,EAASZ,EAAOgB,YAAYL,CAAAA,EAAMX,EAAOW,CAAAA,CAAAA,EACvDM,EAAS,IAAIC,YAAYC,gBAAgBJ,EAAW,WAAA,EACpDK,OAAAA,EAAAC,kBAAkBJ,EAAOK,IAAAA,EACxBL,EAAOK,KAAKC,SAAA"}