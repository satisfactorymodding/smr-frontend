{"version":3,"file":"5.Z3kPI7XR.js","sources":["../../../../../../src/routes/admin/satisfactory-versions/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { getContextClient, queryStore } from '@urql/svelte';\n  import {\n    CreateSatisfactoryVersionDocument,\n    DeleteSatisfactoryVersionDocument,\n    GetSatisfactoryVersionsDocument,\n    UpdateSatisfactoryVersionDocument,\n    type GetSatisfactoryVersionsQuery\n  } from '$lib/generated';\n  import { Accordion, AccordionItem, getToastStore } from '@skeletonlabs/skeleton';\n\n  type SatisfactoryVersion = GetSatisfactoryVersionsQuery['getSatisfactoryVersions'][number];\n\n  const client = getContextClient();\n\n  const panels = {};\n  const versionFields = {};\n\n  const satisfactoryVersionsQuery = queryStore({\n    query: GetSatisfactoryVersionsDocument,\n    client\n  });\n\n  $: satisfactoryVersions = $satisfactoryVersionsQuery.data?.getSatisfactoryVersions || [];\n\n  const toastStore = getToastStore();\n\n  function newSatisfactoryVersion() {\n    if (!satisfactoryVersions.find((satisfactoryVersion) => satisfactoryVersion.id < 0)) {\n      const satisfactoryVersion = { id: -1, version: 0, engine_version: '4.26' } as SatisfactoryVersion;\n      satisfactoryVersions.push(satisfactoryVersion);\n      satisfactoryVersions = satisfactoryVersions;\n      setTimeout(() => {\n        panels[satisfactoryVersion.id].setOpen(true);\n        const field = versionFields[satisfactoryVersion.id];\n        field.focus();\n        const input = field.getElement().querySelectorAll('input')[0] as HTMLInputElement;\n        input.select();\n      }, 0);\n    } else {\n      panels[satisfactoryVersions[satisfactoryVersions.length - 1].id].setOpen(true);\n      versionFields[satisfactoryVersions[satisfactoryVersions.length - 1].id].focus();\n    }\n  }\n\n  async function satisfactoryVersionChange(satisfactoryVersion: SatisfactoryVersion) {\n    if (satisfactoryVersion.version === 0) {\n      return;\n    }\n\n    console.log(satisfactoryVersion);\n\n    let success = false;\n    if (satisfactoryVersion.id < 0) {\n      // Create new satisfactory version & update satisfactoryVersion.id with new DB id or re-fetch all satisfactory versions\n      try {\n        const result = await client\n          .mutation(CreateSatisfactoryVersionDocument, {\n            satisfactoryVersion: {\n              version: satisfactoryVersion.version,\n              engine_version: satisfactoryVersion.engine_version\n            }\n          })\n          .toPromise();\n        if (result.data) {\n          satisfactoryVersion.id = result.data.createSatisfactoryVersion.id;\n          success = true;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to create Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    } else {\n      // Update existing satisfactory version\n      try {\n        success =\n          (\n            await client\n              .mutation(UpdateSatisfactoryVersionDocument, {\n                id: satisfactoryVersion.id,\n                satisfactoryVersion: {\n                  version: satisfactoryVersion.version,\n                  engine_version: satisfactoryVersion.engine_version\n                }\n              })\n              .toPromise()\n          ).data.updateSatisfactoryVersion != null;\n      } catch {\n        // nothing\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to update Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    }\n\n    toastStore.trigger({\n      message: `Satisfactory version '${satisfactoryVersion.version}' saved!`,\n      background: 'variant-filled-success',\n      timeout: 2000\n    });\n  }\n\n  async function deleteSatisfactoryVersion(satisfactoryVersion: SatisfactoryVersion) {\n    if (!(satisfactoryVersion.id < 0)) {\n      // Remove satisfactory version\n      let success = false;\n      try {\n        const result = await client\n          .mutation(DeleteSatisfactoryVersionDocument, { satisfactoryVersionID: satisfactoryVersion.id })\n          .toPromise();\n        success = result.data.deleteSatisfactoryVersion;\n        if (success) {\n          satisfactoryVersions = satisfactoryVersions.filter((version) => version.id !== satisfactoryVersion.id);\n        }\n      } catch {\n        success = false;\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to remove Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    }\n\n    toastStore.trigger({\n      message: `Satisfactory version '${satisfactoryVersion.version}' removed!`,\n      background: 'variant-filled-success',\n      timeout: 2000\n    });\n  }\n\n  function onDeleteClick(e: Event, satisfactoryVersion: SatisfactoryVersion) {\n    e.stopPropagation();\n    deleteSatisfactoryVersion(satisfactoryVersion);\n  }\n</script>\n\n<h1>Satisfactory Versions</h1>\n\n<div class=\"card\">\n  {#if $satisfactoryVersionsQuery.fetching}\n    <h1>Loading satisfactory versions...</h1>\n  {:else if $satisfactoryVersionsQuery.error}\n    <h1>Failed to load satisfactory versions: {$satisfactoryVersionsQuery.error.message}</h1>\n  {:else}\n    <Accordion>\n      {#each satisfactoryVersions as satisfactoryVersion}\n        <AccordionItem>\n          <svelte:fragment slot=\"summary\">{satisfactoryVersion.version}</svelte:fragment>\n          <svelte:fragment slot=\"content\">\n            <div>\n              <div>Game CL#</div>\n              <input\n                type=\"text\"\n                class=\"input p-2\"\n                bind:value={satisfactoryVersion.version}\n                placeholder=\"Version\"\n                bind:this={versionFields[satisfactoryVersion.id]}\n                on:change={() => satisfactoryVersionChange(satisfactoryVersion)} />\n              <div>Engine Version</div>\n              <input\n                type=\"text\"\n                class=\"input p-2\"\n                bind:value={satisfactoryVersion.engine_version}\n                placeholder=\"Engine version\"\n                on:change={() => satisfactoryVersionChange(satisfactoryVersion)} />\n            </div>\n\n            <button class=\"variant-ghost-error btn\" on:click={(e) => onDeleteClick(e, satisfactoryVersion)}>\n              <span>Delete</span>\n            </button>\n          </svelte:fragment>\n        </AccordionItem>\n      {/each}\n    </Accordion>\n\n    <section class=\"p-4\">\n      <button class=\"variant-ghost-primary btn\" on:click={newSatisfactoryVersion}>\n        <span>Add new Satisfactory version</span>\n        <span class=\"material-icons\">add</span>\n      </button>\n    </section>\n  {/if}\n</div>\n\n<style lang=\"postcss\">\n  h1 {\n    @apply my-4 text-4xl font-bold;\n  }\n</style>\n"],"names":["insert_hydration_dev","target","section","anchor","append_hydration_dev","button","span0","span1","ctx","error","message","h1","set_data_dev","t1","t1_value","t_value","version","dirty","t","div2","div0","input0","set_input_value","div1","input1","engine_version","span","value","length","i","each_blocks","fetching","div","client","getContextClient","panels","versionFields","satisfactoryVersionsQuery","queryStore","query","GetSatisfactoryVersionsDocument","toastStore","getToastStore","newSatisfactoryVersion","satisfactoryVersions","find","satisfactoryVersion","id","setOpen","focus","push","setTimeout","field","getElement","querySelectorAll","select","async","satisfactoryVersionChange","console","log","success","result","mutation","CreateSatisfactoryVersionDocument","toPromise","data","createSatisfactoryVersion","err","trigger","background","timeout","UpdateSatisfactoryVersionDocument","updateSatisfactoryVersion","deleteSatisfactoryVersion","DeleteSatisfactoryVersionDocument","satisfactoryVersionID","$$invalidate","filter","onDeleteClick","e","stopPropagation","this","$$value","change_handler","change_handler_1","click_handler","$satisfactoryVersionsQuery","getSatisfactoryVersions"],"mappings":"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"}