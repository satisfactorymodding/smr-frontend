{"version":3,"file":"VersionForm.oBD2e3Rg.js","sources":["../../../../../../src/lib/models/versions.ts","../../../../../../src/lib/components/versions/VersionForm.svelte"],"sourcesContent":["import * as zod from 'zod';\nimport JSZip from 'jszip';\nimport { validateUPluginJson } from '$lib/utils/uplugin';\nimport type { Writable } from 'svelte/store';\nimport type { ZodObject, ZodRawShape } from 'zod';\nimport type { File } from '$lib/models/file';\nimport type { VersionStabilities } from '$lib/generated';\nimport { TargetName } from '$lib/generated/graphql';\n\nexport type VersionData = {\n  file: File;\n  changelog: string;\n  stability: VersionStabilities;\n};\n\nexport type VersionMetadata = {\n  uplugin: {\n    Version: string;\n    SemVersion?: string;\n    GameVersion?: string;\n    Plugins?: {\n      Name: string;\n      SemVersion?: string;\n      BasePlugin?: boolean;\n      Optional?: boolean;\n    }[];\n  };\n  objects: string[];\n  targets: string[];\n};\n\nconst ALLOWED_TARGETS = Object.keys(TargetName)\n  .map((key) => TargetName[key])\n  .filter((value) => typeof value === 'string') as TargetName[];\n\nconst readUPluginJson = async (\n  uPluginJson: string,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata['uplugin']> => {\n  const result = await validateUPluginJson(uPluginJson);\n\n  if (result.length != 0) {\n    return {\n      message: `invalid ${modReference}.uplugin`,\n      extended: result\n    };\n  }\n\n  const parsed = JSON.parse(uPluginJson) as VersionMetadata['uplugin'];\n\n  const hasSMLDependency = parsed.Plugins?.some((plugin) => plugin.Name === 'SML');\n  const hasGameVersion = !!parsed.GameVersion;\n\n  if (!hasSMLDependency && !hasGameVersion) {\n    return {\n      message: `either GameVersion or SML dependency must be present in ${modReference}.uplugin`\n    };\n  }\n\n  return parsed;\n};\n\nfunction basename(path: string): string {\n  const parts = path.split('/');\n  return parts[parts.length - 1];\n}\n\nfunction dirname(path: string): string {\n  const parts = path.split('/');\n  return parts.slice(0, parts.length - 1).join('/');\n}\n\nconst objectExtensions = ['.so', '.dll', '.pak', '.utoc', '.ucas'];\n\nconst validateModZip = async (\n  file: unknown,\n  modReference: string\n): Promise<{ [key: string]: unknown } | VersionMetadata> => {\n  const zipper = new JSZip();\n  return (\n    zipper\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .loadAsync(file as any)\n      .then(async (zip) => {\n        const uPluginFiles = zip.filter((filePath) => basename(filePath) == modReference + '.uplugin');\n\n        if (uPluginFiles.length === 0) {\n          return {\n            message: 'Mod does not contain any ' + modReference + '.uplugin files'\n          };\n        }\n\n        const objects = Object.keys(zip.files).filter((f) => objectExtensions.some((ext) => f.endsWith(ext)));\n\n        if (uPluginFiles.length === 1 && uPluginFiles[0].name === modReference + '.uplugin') {\n          // Single-target mod\n          const uPluginData = await readUPluginJson(await uPluginFiles[0].async('string'), modReference);\n\n          if ('message' in uPluginData) {\n            return uPluginData;\n          }\n\n          return {\n            uplugin: uPluginData,\n            objects,\n            targets: ['Windows']\n          };\n        }\n\n        // Multi-target mod\n        if (uPluginFiles.some((f) => f.name === modReference + '.uplugin')) {\n          return {\n            message:\n              'Mod contains ' +\n              modReference +\n              '.uplugin files in the root directory. New uploads must use the multi-target format. Read more on the docs: https://docs.ficsit.app/satisfactory-modding/latest/Development/UpdatingToDedi.html'\n          };\n        }\n\n        const targets = uPluginFiles.map((f) => dirname(f.name));\n\n        const invalidTargets = targets.filter((t) => !ALLOWED_TARGETS.includes(t as TargetName));\n        if (invalidTargets.length !== 0) {\n          return {\n            message: `invalid target(s): ${invalidTargets.join(', ')}`\n          };\n        }\n\n        const outsideFiles = zip.filter((filePath) => !targets.some((target) => filePath.startsWith(target + '/')));\n        if (outsideFiles.length !== 0) {\n          return {\n            message: `file(s) outside target directories: ${outsideFiles.map((f) => f.name).join(', ')}`\n          };\n        }\n\n        const uPluginFilesData = await Promise.all(\n          uPluginFiles.map((f) =>\n            f.async('string').catch((err) => {\n              // Will be caught by the .catch below\n              throw new Error(`invalid ${modReference}.uplugin: ${err}`);\n            })\n          )\n        );\n\n        if (!uPluginFilesData.every((f) => f === uPluginFilesData[0])) {\n          return {\n            message: 'Mod contains ' + modReference + '.uplugin files with different contents'\n          };\n        }\n\n        // Since the .uplugin files are all the same, we only need to parse one\n        const uPluginData = await readUPluginJson(uPluginFilesData[0], modReference);\n\n        if ('message' in uPluginData) {\n          return uPluginData;\n        }\n\n        return {\n          uplugin: uPluginData,\n          objects,\n          targets\n        };\n      })\n      .catch((err) => ({\n        message: 'invalid zip/smod file: ' + err\n      }))\n  );\n};\n\nexport const constructVersionSchema = (\n  modReference: string,\n  modMetadata: Writable<VersionMetadata>\n): ZodObject<ZodRawShape> =>\n  zod.object({\n    file: zod.optional(\n      zod.any().superRefine(async (file, ctx) => {\n        if (!('name' in file && 'size' in file && 'type' in file)) {\n          ctx.addIssue({\n            message: 'Unknown file error',\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        const result = await validateModZip(file, modReference);\n\n        if ('message' in result) {\n          ctx.addIssue({\n            message: result.message as string,\n            code: zod.ZodIssueCode.custom\n          });\n          return;\n        }\n\n        modMetadata.set(result as VersionMetadata);\n      })\n    ),\n    changelog: zod.string(),\n    stability: zod.string()\n  });\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { VersionData, VersionMetadata } from '$lib/models/versions';\n  import { constructVersionSchema } from '$lib/models/versions';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { writable } from 'svelte/store';\n  import { VersionStabilities } from '$lib/generated';\n  import { prettyBytes } from '$lib/utils/formatting';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let modReference: string;\n  export let onSubmit: (data: VersionData) => Promise<void>;\n  export let initialValues: Omit<VersionData, 'file'> = {\n    changelog: '',\n    stability: VersionStabilities.Release\n  };\n  export let submitIcon: string;\n  export let submitText = $t('entry.create');\n\n  export let editing = false;\n\n  const modMeta = writable<VersionMetadata>();\n\n  let disabled = false;\n\n  const versionSchema = constructVersionSchema(modReference, modMeta);\n  const { form, data } = createForm<VersionData>({\n    initialValues: initialValues as VersionData,\n    extend: [validator({ schema: versionSchema }), reporter],\n    onSubmit: (submitted: VersionData) => {\n      disabled = true;\n      onSubmit(trimNonSchema(submitted, versionSchema)).then(() => (disabled = false));\n    }\n  });\n\n  $: preview = ($data.changelog as string) || '';\n  $: dependencies = $modMeta?.uplugin?.Plugins?.filter((d) => !d.BasePlugin) || [];\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    {#if !editing}\n      <div class=\"grid grid-flow-row gap-2\">\n        <label for=\"file\">{$t('file')} *</label>\n        <input id=\"file\" class=\"base-input\" name=\"file\" type=\"file\" accept=\".zip,.smod\" placeholder=\"File\" />\n        <ValidationMessage for=\"file\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n\n      {#if $data.file}\n        <div>\n          <span><strong>{$t('file-type')}:</strong> {$data.file.type || 'Unknown'}</span><br />\n          <span><strong>{$t('file-size')}:</strong> {prettyBytes($data.file.size)}</span>\n        </div>\n      {/if}\n\n      {#if $modMeta}\n        <div>\n          <p class=\"mb-4\">\n            <span><strong>{$t('version')}:</strong> {$modMeta.uplugin.Version}<br /></span>\n\n            {#if $modMeta.uplugin.SemVersion !== undefined}\n              <span><strong>SemVersion:</strong> {$modMeta.uplugin.SemVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n                {$modMeta.uplugin.Version}.0.0\n              </span>\n            {/if}\n\n            {#if $modMeta.uplugin.GameVersion !== undefined}\n              <span><strong>Game version:</strong> {$modMeta.uplugin.GameVersion}<br /></span>\n            {:else}\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-game-version')}\n              </span>\n            {/if}\n          </p>\n\n          <span><strong>Targets:</strong> {$modMeta.targets.join(', ')}<br /></span>\n\n          {#if $modMeta.uplugin.Plugins !== undefined}\n            <p>\n              <strong>{$t('dependencies')}:</strong><br />\n              {#each dependencies as dependency}\n                <strong>{dependency.Name}: </strong>\n                {#if dependency.SemVersion}\n                  <span>{dependency.SemVersion}</span>\n                {:else}\n                  <span>*</span>\n                {/if}\n                <br />\n              {/each}\n            </p>\n          {/if}\n\n          {#if $modMeta.objects && $modMeta.objects.length > 0}\n            <p>\n              <strong>{$t('objects')}:</strong><br />\n              {#each $modMeta.objects as object}\n                <span>{object}</span>\n                <br />\n              {/each}\n            </p>\n          {:else}\n            <p>\n              <span class=\"text-yellow-600\">\n                {$t('version-form.missing-sem-version')}\n              </span>\n            </p>\n          {/if}\n        </div>\n      {/if}\n    {/if}\n\n    <div class=\"split grid gap-6\">\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <label class=\"label\">\n          <span>{$t('changelog')} *</span>\n          <textarea class=\"vertical-textarea textarea p-2\" bind:value={$data.changelog} required rows={10} />\n        </label>\n        <ValidationMessage for=\"changelog\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <!-- eslint-disable-next-line -->\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div class=\"text-muted\">\n      {$t('version-form.agreement-to')} <a href=\"/content-policy\">{$t('content-policy')}</a>.\n    </div>\n\n    <div>\n      <button class=\"variant-ghost-primary btn\" type=\"submit\" {disabled}>\n        <span class=\"material-icons pr-2\">{submitIcon}</span>\n        {submitText}\n      </button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n\n  a {\n    @apply text-yellow-500 underline;\n  }\n</style>\n"],"names":["ALLOWED_TARGETS","Object","keys","TargetName","map","key","filter","value","readUPluginJson","async","uPluginJson","modReference","result","validateUPluginJson","length","message","extended","parsed","JSON","parse","hasSMLDependency","Plugins","some","plugin","Name","hasGameVersion","GameVersion","basename","path","parts","split","dirname","slice","join","objectExtensions","validateModZip","file","JSZip","loadAsync","then","zip","uPluginFiles","filePath","objects","files","f","ext","endsWith","name","uPluginData","uplugin","targets","invalidTargets","t","includes","outsideFiles","target","startsWith","uPluginFilesData","Promise","all","catch","err","Error","every","constructVersionSchema","modMetadata","zod.object","zod.optional","zod.any","superRefine","ctx","addIssue","code","zod.ZodIssueCode","custom","set","changelog","zod.string","stability","t0_value","if_block0","create_if_block_7","create_if_block_1","insert_hydration","div","anchor","append_hydration","label","input","current","dirty","set_data","t0","t_1_value","span","t_1","t3_value","type","t5_value","t8_value","prettyBytes","size","span0","strong0","br","span1","strong1","t3","t5","t8","Version","t9_value","SemVersion","undefined","create_if_block_6","create_if_block_5","if_block2","create_if_block_3","create_if_block_2","p","br0","br1","t9","t2","t2_value","strong","i","create_if_block_4","each_value","ensure_array_like","html_tag","raw_value","t1_value","t6_value","t10_value","t12_value","create_if_block","handle_promise","promise","markdown","info","form_1","div5","div2","div0","textarea","set_input_value","div1","div3","a","div4","button","span2","t1","t6","t10","t12","getTranslate","$$props","onSubmit","initialValues","VersionStabilities","Release","submitIcon","submitText","$t","editing","modMeta","writable","disabled","versionSchema","form","data","createForm","extend","validator","schema","reporter","submitted","$$invalidate","trimNonSchema","$data","this","preview","dependencies","$modMeta","d","BasePlugin"],"mappings":"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"}