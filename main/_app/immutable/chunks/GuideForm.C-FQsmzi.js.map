{"version":3,"file":"GuideForm.C-FQsmzi.js","sources":["../../../../../../src/lib/models/guides.ts","../../../../../../src/lib/components/guides/GuideForm.svelte"],"sourcesContent":["import * as zod from 'zod';\n\nexport type GuideData = {\n  name: string;\n  short_description: string;\n  guide: string;\n};\n\nexport const guideSchema = zod.object({\n  name: zod.string().min(3).max(32),\n  short_description: zod.string().min(16).max(128),\n  guide: zod.string()\n});\n","<script lang=\"ts\">\n  import { createForm } from 'felte';\n  import { validator } from '@felte/validator-zod';\n  import { reporter, ValidationMessage } from '@felte/reporter-svelte';\n  import type { GuideData } from '$lib/models/guides';\n  import { guideSchema } from '$lib/models/guides';\n  import { trimNonSchema } from '$lib/utils/forms';\n  import { markdown } from '$lib/utils/markdown';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let onSubmit: (data: GuideData) => void;\n  export let initialValues: GuideData | undefined = {\n    name: '',\n    guide: '',\n    short_description: ''\n  };\n  export let submitIcon: string;\n  export let submitText = $t('entry.create');\n\n  const { form, data } = createForm<GuideData>({\n    initialValues: initialValues,\n    extend: [validator({ schema: guideSchema }), reporter],\n    onSubmit: (submitted: GuideData) => onSubmit(trimNonSchema(submitted, guideSchema))\n  });\n\n  $: preview = ($data.guide as string) || '';\n</script>\n\n<form use:form>\n  <div class=\"grid grid-flow-row gap-6\">\n    <div class=\"grid grid-flow-row gap-2\">\n      <label class=\"label\">\n        <span>{$t('entry.name')} *</span>\n        <input type=\"text\" bind:value={$data.name} required class=\"input p-2\" />\n      </label>\n      <ValidationMessage for=\"name\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"grid grid-flow-row gap-2\">\n      <label class=\"label\">\n        <span>{$t('entry.short-description')} *</span>\n        <input type=\"text\" bind:value={$data.short_description} required class=\"input p-2\" />\n      </label>\n      <ValidationMessage for=\"short_description\" let:messages={message}>\n        <span class=\"validation-message\">{message || ''}</span>\n      </ValidationMessage>\n    </div>\n\n    <div class=\"split grid gap-6\">\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <label class=\"label\">\n          <span>{$t('guide')} *</span>\n          <textarea class=\"vertical-textarea textarea p-2\" bind:value={$data.guide} required rows={10} />\n        </label>\n        <ValidationMessage for=\"guide\" let:messages={message}>\n          <span class=\"validation-message\">{message || ''}</span>\n        </ValidationMessage>\n      </div>\n      <div class=\"grid grid-flow-row auto-rows-max gap-2\">\n        <span>{$t('preview')}:</span>\n        {#await markdown(preview) then previewRendered}\n          <!-- eslint-disable -->\n          <div class=\"markdown-content right\">{@html previewRendered}</div>\n        {/await}\n      </div>\n    </div>\n\n    <div>\n      <button class=\"variant-ghost-primary btn\" type=\"submit\">\n        <span class=\"material-icons pr-2\">{submitIcon}</span>\n        {submitText}</button>\n    </div>\n  </div>\n</form>\n\n<style lang=\"postcss\">\n  .split {\n    grid-template-columns: 50% 50%;\n\n    & .right {\n      max-height: 75vh;\n      overflow: auto;\n    }\n  }\n</style>\n"],"names":["guideSchema","zod.object","name","zod.string","min","max","short_description","guide","t_1_value","ctx","insert_hydration","target","span","anchor","dirty","set_data","t_1","div","html_tag","p","raw_value","t0_value","t5_value","t10_value","t15_value","message","handle_promise","promise","markdown","info","form_1","append_hydration","div6","div0","label0","span0","input0","set_input_value","div1","label1","span1","input1","div4","div2","label2","span2","textarea","div3","span3","div5","button","span4","current","t0","value","t5","t10","t15","t","getTranslate","onSubmit","$$props","initialValues","submitIcon","submitText","$t","form","data","createForm","extend","validator","schema","reporter","submitted","trimNonSchema","$data","this","preview"],"mappings":"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"}