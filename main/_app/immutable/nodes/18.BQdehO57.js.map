{"version":3,"file":"18.BQdehO57.js","sources":["../../../../../../src/routes/mod/[modId]/new-version/+page.ts","../../../../../../src/lib/utils/chunked-upload.ts","../../../../../../src/routes/mod/[modId]/new-version/+page.svelte"],"sourcesContent":["import type { PageLoad } from './$types';\n\nexport const load: PageLoad = async ({ params }) => ({\n  ...params\n});\n","/* eslint-disable */\n\nimport type { File } from '$lib/models/file';\nimport type { Client } from 'urql';\nimport {\n  CheckVersionUploadStateDocument,\n  FinalizeCreateVersionDocument,\n  type Exact,\n  type NewVersion,\n  CreateVersionDocument,\n  UploadVersionPartDocument,\n  type CheckVersionUploadStateQuery\n} from '$lib/generated';\nimport type { Writable } from 'svelte/store';\nimport { queryStore } from '@urql/svelte';\n\nexport type UploadState = {\n  total: number;\n  uploaded: number;\n};\n\nexport type ChunkedResponse = CheckVersionUploadStateQuery['checkVersionUploadState'];\n\nexport const chunkedUpload = async (\n  file: File,\n  modId: string,\n  version: NewVersion,\n  state: Writable<UploadState>,\n  client: Client\n): Promise<ChunkedResponse> => {\n  const chunkSize = 10000000; // ~ 10MB\n\n  const chunksQuantity = Math.ceil(file.size / chunkSize);\n  const chunksQueue = new Array(chunksQuantity)\n    .fill(0)\n    .map((_, index) => index)\n    .reverse();\n\n  const upload = (chunk: Blob, chunkId: number, versionID: string) => {\n    return client\n      .mutation(UploadVersionPartDocument, {\n        modId: modId,\n        versionId: versionID,\n        part: chunkId,\n        file: chunk\n      })\n      .toPromise();\n  };\n\n  const threadsQuantity = 10;\n  let activeConnections = 0;\n  let retries = 0;\n  const sendNext = (versionID: string) => {\n    if (activeConnections >= threadsQuantity) {\n      return;\n    }\n\n    if (!chunksQueue.length) {\n      return;\n    }\n\n    const chunkId = chunksQueue.pop();\n    const begin = chunkId * chunkSize;\n    const chunk = file.slice(begin, begin + chunkSize);\n\n    activeConnections += 1;\n\n    return Promise.all([\n      upload(chunk, chunkId + 1, versionID)\n        .then(() => {\n          activeConnections -= 1;\n\n          state.set({\n            total: chunksQuantity,\n            uploaded: chunksQuantity - chunksQueue.length - activeConnections\n          });\n\n          return sendNext(versionID);\n        })\n        .catch((err) => {\n          console.error('Upload failed:', err);\n          activeConnections -= 1;\n          chunksQueue.push(chunkId);\n          retries += 1;\n          if (retries < 5) {\n            return sendNext(versionID);\n          } else {\n            throw new Error('Failed uploading after 5 attempts');\n          }\n        }),\n      sendNext(versionID)\n    ]);\n  };\n\n  return client\n    .mutation(CreateVersionDocument, { modId })\n    .toPromise()\n    .then(async (data) => {\n      state.set({\n        total: chunksQuantity,\n        uploaded: 0\n      });\n\n      await sendNext(data.data.createVersion);\n\n      return data.data.createVersion;\n    })\n    .then((versionID) => {\n      console.log('Finalizing', { versionID });\n\n      return client\n        .mutation(FinalizeCreateVersionDocument, { modId, versionId: versionID, version })\n        .toPromise()\n        .then(() => {\n          return new Promise<ChunkedResponse>((resolve, reject) => {\n            let tries = 0;\n            let checkVersionUploadState = queryStore({\n              query: CheckVersionUploadStateDocument,\n              client,\n              variables: {\n                modId: modId,\n                versionId: versionID\n              },\n              requestPolicy: 'network-only'\n            });\n            const interval = setInterval(() => {\n              if (tries == 60) {\n                clearInterval(interval);\n                return reject(new Error('Timed out waiting for mod processing'));\n              }\n\n              checkVersionUploadState.pause();\n              checkVersionUploadState.resume();\n              tries++;\n            }, 10000);\n\n            const unsub = checkVersionUploadState.subscribe((data) => {\n              if (data.fetching) {\n                return;\n              }\n\n              if (data.error) {\n                clearInterval(interval);\n                reject(new Error(data.error.message));\n                setTimeout(unsub);\n                return;\n              }\n\n              if (!data.data?.checkVersionUploadState?.version?.id) {\n                return;\n              }\n\n              unsub();\n              clearInterval(interval);\n              resolve(data.data.checkVersionUploadState);\n            });\n          });\n        });\n    })\n    .catch((err) => {\n      console.error(err);\n      throw err;\n    });\n};\n","<script lang=\"ts\">\n  import { getContextClient, queryStore } from '@urql/svelte';\n  import { goto } from '$app/navigation';\n  import type { VersionData } from '$lib/models/versions';\n  import VersionForm from '$lib/components/versions/VersionForm.svelte';\n  import { GetModDocument } from '$lib/generated';\n  import { writable } from 'svelte/store';\n  import { chunkedUpload } from '$lib/utils/chunked-upload';\n  import type { UploadState } from '$lib/utils/chunked-upload';\n  import { base } from '$app/paths';\n  import MetaDescriptors from '$lib/components/utils/MetaDescriptors.svelte';\n  import type { PageData } from './$types';\n  import { getModalStore, getToastStore, type ModalSettings } from '@skeletonlabs/skeleton';\n  import EditCompatibilityForm from '$lib/components/mods/compatibility/EditCompatibilityForm.svelte';\n  import { getTranslate } from '@tolgee/svelte';\n\n  export const { t } = getTranslate();\n\n  export let data: PageData;\n\n  const { modId } = data;\n\n  const client = getContextClient();\n\n  const uploadStatus = writable<undefined | string>('');\n  const uploadPercent = writable<number>(0);\n\n  const uploadState = writable<UploadState>();\n\n  uploadState.subscribe((up) => {\n    if (up) {\n      if (up.uploaded === up.total) {\n        uploadStatus.set(`Processing...`);\n        uploadPercent.set(100);\n      } else {\n        uploadStatus.set(`Uploading: ${up.uploaded}/${up.total}`);\n        uploadPercent.set((up.uploaded / up.total) * 100);\n      }\n    }\n  });\n\n  const toastStore = getToastStore();\n\n  const mod = queryStore({\n    query: GetModDocument,\n    client,\n    variables: { mod: modId }\n  });\n\n  const onSubmit = async (versionData: VersionData) =>\n    chunkedUpload(\n      versionData.file,\n      $mod.data.mod.id,\n      {\n        changelog: versionData.changelog,\n        stability: versionData.stability\n      },\n      uploadState,\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      client\n    )\n      .then((success) => {\n        toastStore.trigger({\n          message: `Version created`,\n          background: 'variant-filled-success',\n          timeout: 5000\n        });\n        goto(base + '/mod/' + modId + '/version/' + success.version.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        toastStore.trigger({\n          message: 'Error creating version: ' + err.message,\n          background: 'variant-filled-error',\n          autohide: false\n        });\n        uploadStatus.set('');\n      });\n\n  const goBackFn = () => {\n    goto(base + '/mod/' + modId);\n  };\n\n  const backModal: ModalSettings = {\n    type: 'confirm',\n    title: 'Go Back?',\n    buttonTextCancel: 'Keep Editing',\n    buttonTextConfirm: 'Go Back',\n    body: 'Going back will discard any unsaved changes. Are you sure you wish to continue?',\n    response: (r: boolean) => {\n      if (r) {\n        goBackFn();\n      }\n    }\n  };\n\n  const modalStore = getModalStore();\n</script>\n\n<svelte:head>\n  {#if !$mod.fetching && !$mod.error && $mod.data.mod}\n    <MetaDescriptors\n      description=\"Creating a new version of mod {$mod.data.mod.name}\"\n      title=\"New version of mod {$mod.data.mod.name}\" />\n  {/if}\n</svelte:head>\n\n<div class=\"flex h-auto flex-wrap items-center justify-between\">\n  <h1 class=\"my-4 text-4xl font-bold\">\n    New Version for\n    {#if $mod.fetching}\n      ...\n    {:else if !$mod.error}\n      {$mod.data.mod.name}\n    {/if}\n  </h1>\n  <div>\n    <button\n      class=\"variant-ghost-primary btn\"\n      title=\"View the description page for this mod\"\n      on:click={() => modalStore.trigger(backModal)}>\n      <span class=\"material-icons pr-2\">arrow_back</span>\n      {$t('version.back')}\n    </button>\n  </div>\n</div>\n\n<div class=\"card p-4\">\n  <section>\n    {#if $mod.fetching}\n      <p>Loading...</p>\n    {:else if $mod.error}\n      <p>Oh no... {$mod.error.message}</p>\n    {:else}\n      <VersionForm {onSubmit} modReference={$mod.data.mod.mod_reference} submitIcon=\"add_circle\" />\n\n      {#if $uploadStatus}\n        <div class=\"relative pt-4\">\n          <div class=\"mb-2 flex items-center justify-between\">\n            <div>\n              <span\n                class=\"inline-block rounded-full bg-yellow-600 px-2 py-1 text-xs font-semibold uppercase text-white\">\n                {$uploadStatus}\n              </span>\n            </div>\n            <div class=\"text-right\">\n              <span class=\"inline-block text-xs font-semibold text-white\">{$uploadPercent.toFixed(0)}%</span>\n            </div>\n          </div>\n          <div class=\"mb-4 flex h-2 overflow-hidden rounded bg-neutral-600 text-xs\">\n            <div\n              style=\"width: {$uploadPercent.toFixed(0)}%\"\n              class=\"flex flex-col justify-center whitespace-nowrap bg-yellow-600 text-center text-white shadow-none\" />\n          </div>\n        </div>\n      {/if}\n\n      <div class=\"p-4\">\n        <span>Edit Compatibility Info</span>\n      </div>\n      <div class=\"card p-4\">\n        <EditCompatibilityForm\n          mod={$mod.data.mod}\n          modId={$mod.data.mod.id}\n          on:fail={() => {\n            alert('Failed to update compatibility information, check browser console for more info.');\n          }}\n          on:submit={() => {\n            alert(\"Mod compatibility data updated. Don't forget to upload the version too!\");\n          }} />\n      </div>\n    {/if}\n  </section>\n</div>\n"],"names":["load","async","params","chunkedUpload","file","modId","version","state","client","chunksQuantity","Math","ceil","size","chunkSize","chunksQueue","Array","fill","map","_","index","reverse","upload","chunk","chunkId","versionID","mutation","UploadVersionPartDocument","versionId","part","toPromise","threadsQuantity","activeConnections","retries","sendNext","length","pop","begin","slice","Promise","all","then","set","total","uploaded","catch","err","console","error","push","Error","CreateVersionDocument","data","createVersion","log","FinalizeCreateVersionDocument","resolve","reject","tries","checkVersionUploadState","queryStore","query","CheckVersionUploadStateDocument","variables","requestPolicy","interval","setInterval","clearInterval","pause","resume","unsub","subscribe","fetching","message","setTimeout","id","description","ctx","mod","name","title","dirty","metadescriptors_changes","t_1_value","set_data","t_1","modReference","mod_reference","create_if_block_2","insert_hydration","target","div0","anchor","div1","versionform_changes","editcompatibilityform_changes","p","t1","t1_value","toFixed","div5","append_hydration","div2","span0","span1","div4","div3","t2","t2_value","t5_value","create_if_block_5","create_if_block_3","create_if_block_4","h1","button","span","section","current","t5","t","getTranslate","$$props","getContextClient","uploadStatus","writable","uploadPercent","uploadState","up","toastStore","getToastStore","GetModDocument","onSubmit","versionData","$mod","changelog","stability","success","trigger","background","timeout","goto","base","autohide","goBackFn","backModal","type","buttonTextCancel","buttonTextConfirm","body","response","r","modalStore","getModalStore","alert"],"mappings":"ylBAEO,MAAMA,GAAiBC,MAASC,CAAAA,OAAAA,CAAAA,KAAc,CAChDA,GAAAA,CAAAA,yGCoBQC,GAAgBF,MAC3BG,EACAC,EACAC,EACAC,EACAC,IAAAA,CAIA,MAAMC,EAAiBC,KAAKC,KAAKP,EAAKQ,KAAOC,GAAAA,EACvCC,EAAc,IAAIC,MAAMN,CAAAA,EAC3BO,KAAK,CAAA,EACLC,IAAI,CAACC,EAAGC,IAAUA,CAAAA,EAClBC,QAEH,EAAMC,EAAS,CAACC,EAAaC,EAAiBC,IACrChB,EACJiB,SAASC,GAA2B,CACnCrB,MAAAA,EACAsB,UAAWH,EACXI,KAAML,EACNnB,KAAMkB,CAEPO,CAAAA,EAAAA,UAAAA,EAGCC,EAAkB,GACxB,IAAIC,EAAoB,EACpBC,EAAU,EACR,MAAAC,EAAYT,GAAAA,CAKZ,GAJAO,GAAqBD,GAIpBhB,CAAAA,EAAYoB,OACf,OAGI,MAAAX,EAAUT,EAAYqB,MACtBC,EAAQb,EAAUV,IAClBS,EAAQlB,EAAKiC,MAAMD,EAAOA,EAAQvB,GAAAA,EAEnBkB,OAAAA,GAAA,EAEdO,QAAQC,IAAI,CACjBlB,EAAOC,EAAOC,EAAU,EAAGC,CACxBgB,EAAAA,KAAK,KACiBT,GAAA,EAErBxB,EAAMkC,IAAI,CACRC,MAAOjC,EACPkC,SAAUlC,EAAiBK,EAAYoB,OAASH,CAGlD,CAAA,EAAOE,EAAST,CAAS,EAAA,EAE1BoB,MAAOC,GAAAA,CAKN,GAJQC,QAAAC,MAAM,iBAAkBF,CAAAA,EACXd,GAAA,EACrBjB,EAAYkC,KAAKzB,CAAAA,EACNS,GAAA,EACPA,EAAU,EACZ,OAAOC,EAAST,CAAS,EAEnB,MAAA,IAAIyB,MAAM,oCAGtBhB,CAAAA,EAAAA,EAAST,CACV,CAAA,CAAA,CAAA,EAGI,OAAAhB,EACJiB,SAASyB,GAAuB,CAAE7C,UAClCwB,UACAW,EAAAA,KAAKvC,MAAOkD,IACX5C,EAAMkC,IAAI,CACRC,MAAOjC,EACPkC,SAAU,CAAA,CAAA,EAAA,MAGNV,EAASkB,EAAKA,KAAKC,aAEzB,EAAOD,EAAKA,KAAKC,cAElBZ,EAAAA,KAAMhB,IACLsB,QAAQO,IAAI,aAAc,CAAE7B,UAAAA,CAAAA,CAAAA,EAErBhB,EACJiB,SAAS6B,GAA+B,CAAEjD,QAAOsB,UAAWH,EAAWlB,QACvEuB,CAAAA,CAAAA,EAAAA,UAAAA,EACAW,KAAK,IACG,IAAIF,QAAyB,CAACiB,EAASC,IAAAA,CAC5C,IAAIC,EAAQ,EACRC,EAA0BC,GAAW,CACvCC,MAAOC,GACPrD,OAAAA,EACAsD,UAAW,CACTzD,QACAsB,UAAWH,CAAAA,EAEbuC,cAAe,cAAA,CAAA,EAEX,MAAAC,EAAWC,YAAY,IAC3B,CAAA,GAAIR,GAAS,GACXS,qBAAcF,CAAAA,EACPR,EAAO,IAAIP,MAAM,sCAAA,CAAA,EAG1BS,EAAwBS,MAAAA,EACxBT,EAAwBU,OAAAA,EACxBX,GAAA,EACC,GAEH,EAAMY,EAAQX,EAAwBY,UAAWnB,GAC/C,CAAA,GAAIA,CAAAA,EAAKoB,SAIT,IAAIpB,EAAKJ,MAAO,CACdmB,cAAcF,CACdR,EAAAA,EAAO,IAAIP,MAAME,EAAKJ,MAAMyB,OAAAA,CAAAA,EAC5BC,WAAWJ,CAAAA,EACX,MACF,CAEKlB,EAAKA,MAAMO,yBAAyBpD,SAASoE,KAI5CL,EAAAA,EACNH,cAAcF,CAAAA,EACNT,EAAAJ,EAAKA,KAAKO,uBAAuB,GAAA,CAAA,CAC1C,IAIRd,EAAAA,MAAOC,GACNC,CAAAA,cAAQC,MAAMF,CACR,EAAAA,CAAA,CAAA,CACP,iDC3D6C8B,YAAA,iCAAAC,EAAK,CAAAzB,EAAAA,KAAK0B,IAAIC,KAC/BC,MAAA,sBAAAH,EAAK,CAAAzB,EAAAA,KAAK0B,IAAIC,IAAAA,CAAAA,CAAAA,0FADGE,EAAA,IAAAC,EAAAN,YAAA,iCAAAC,EAAK,CAAAzB,EAAAA,KAAK0B,IAAIC,MAC/BE,EAAA,IAAAC,EAAAF,MAAA,sBAAAH,EAAK,CAAA,EAAAzB,KAAK0B,IAAIC,+GAUxC,IAAAI,EAAAN,EAAK,CAAAzB,EAAAA,KAAK0B,IAAIC,KAAI,+DAAlBE,EAAA,GAAAE,KAAAA,EAAAN,EAAK,CAAA,EAAAzB,KAAK0B,IAAIC,KAAI,KAAAK,EAAAC,EAAAF,CAAAA,sDAHH,KAAA,cAAA,qJAwBsBG,EAAAA,aAAAT,EAAK,CAAA,EAAAzB,KAAK0B,IAAIS,+CAE/CV,EAAa,CAAA,GAAAW,GAAAX,+BA0BTA,EAAI,CAACzB,EAAAA,KAAK0B,IACRxE,MAAAuE,EAAK,CAAAzB,EAAAA,KAAK0B,IAAIH,EAAAA,CAAAA,CAAAA,gdANzBc,EAAAA,EAEKC,EAAAC,EAAAC,CAAAA,WACLH,EAUKC,EAAAG,EAAAD,uCApCiCX,EAAA,IAAAa,EAAAR,aAAAT,EAAK,CAAAzB,EAAAA,KAAK0B,IAAIS,yBAE/CV,EAAa,CAAA,2FA0BTA,EAAI,CAAA,EAACzB,KAAK0B,KACRG,EAAA,IAAAc,EAAAzF,MAAAuE,EAAK,CAAAzB,EAAAA,KAAK0B,IAAIH,0MA/BZE,EAAI,CAAC7B,EAAAA,MAAMyB,QAAO,6BAA5B,WAAA,8CAAA,WAAA,gCAAHgB,EAAmCC,EAAAM,EAAAJ,qCAAtBf,EAAI,GAAC7B,MAAMyB,QAAO,KAAAW,EAAAa,EAAAC,2LAF/BT,CAAAA,EAAgBC,EAAAM,EAAAJ,oEAgBqDf,EAAc,CAACsB,EAAAA,QAAQ,GAAC,yEAJlFtB,EAAa,CAAA,CAAA,0CAIuE,GAAA,wLAJpFA,EAAa,2HAIuE,GAAA,kbAKxEA,EAAc,CAACsB,EAAAA,QAAQ,GAAC,qOAd7CV,EAiBKC,EAAAU,EAAAR,CAhBHS,EAAAA,EAUKD,EAAAE,CATHD,EAAAA,EAKKC,EAAAX,CAAAA,EAJHU,EAGMV,EAAAY,iBAERF,EAEKC,EAAAT,CAAAA,EADHQ,EAA8FR,EAAAW,wBAGlGH,EAIKD,EAAAK,CAHHJ,EAAAA,EAE2GI,EAAAC,oBAVtG7B,EAAa,CAAA,CAAA,eAI6CA,EAAc,CAACsB,EAAAA,QAAQ,CAAC,EAAA,KAAAf,EAAAuB,EAAAC,CAAAA,qBAKtE/B,EAAc,CAAA,EAACsB,QAAQ,CAAA,EAAC,2EA7B9CU,EAAAhC,KAAG,cAAc,EAAA,wBAtBhBA,EAAI,CAAA,EAACL,UAAaK,CAAAA,EAAI,CAAC7B,EAAAA,OAAS6B,EAAI,CAACzB,EAAAA,KAAK0B,KAAGgC,GAAAjC,mBAU5C,GAAAA,KAAKL,SAAQ,OAAAuC,GAEP,GAAA,CAAAlC,KAAK7B,MAAK,OAAAgE,gEAiBhB,CAAA,OAAAnC,KAAKL,SAAQ,EAERK,GAAK7B,EAAAA,MAAK,sFAvBa;AAAA,uSAAA;AAAA,8rBADrCyC,EAAAA,EAkBKC,EAAAG,EAAAD,GAjBHS,EAOIR,EAAAoB,8BACJZ,EAAAA,EAQKR,EAAAF,CAAAA,EAPHU,EAMQV,EAAAuB,CAAAA,EAFNb,EAAkDa,EAAAC,wBAMxD1B,EAAAA,EA8CKC,EAAAY,EAAAV,GA7CHS,EA4CSC,EAAAc,kEAxEHvC,EAAI,CAACL,EAAAA,UAAAA,CAAaK,EAAI,CAAA,EAAC7B,OAAS6B,EAAI,CAACzB,EAAAA,KAAK0B,oLAsB3C,CAAAuC,GAAApC,EAAA,IAAA4B,KAAAA,EAAAhC,GAAG,EAAA,cAAA,EAAc,KAAAO,EAAAkC,EAAAT,CAAAA,kWA3GP,CAAA,EAAA,KAAA,CAAAU,EAAAA,CAAAA,EAAMC,kBAEVpE,CAAAA,EAAcqE,EAEjB,KAAA,CAAAnH,MAAAA,CAAU8C,EAAAA,EAEZ3C,EAASiH,KAETC,EAAeC,EAA6B,EAAA,2BAC5CC,EAAgBD,EAAiB,CAAA,kBAEjC,CAAA,EAAA,MAAAE,EAAcF,EAAAA,EAEpBE,EAAYvD,UAAWwD,GAAAA,CACjBA,IACEA,EAAGnF,WAAamF,EAAGpF,OACrBgF,EAAajF,IAAG,eAAA,EAChBmF,EAAcnF,IAAI,OAElBiF,EAAajF,IAAkB,cAAAqF,EAAGnF,YAAYmF,EAAGpF,KAAAA,EAAAA,EACjDkF,EAAcnF,IAAKqF,EAAGnF,SAAWmF,EAAGpF,MAAS,GAAA,MAK7C,MAAAqF,EAAaC,KAEbnD,EAAMlB,GAAU,CACpBC,MAAOqE,GACPzH,OAAAA,EACAsD,UAAS,CAAIe,IAAKxE,8BAGd6H,EAAQjI,MAAAA,GACZE,GACEgI,EAAY/H,KACZgI,EAAKjF,KAAK0B,IAAIH,IAEZ2D,UAAWF,EAAYE,UACvBC,UAAWH,EAAYG,SAAAA,EAEzBT,EAGArH,CAAAA,EAECgC,KAAM+F,GACLR,CAAAA,EAAWS,QAAO,CAChBhE,QAAO,kBACPiE,WAAY,yBACZC,QAAS,MAEXC,GAAKC,GAAO,QAAUvI,EAAQ,YAAckI,EAAQjI,QAAQoE,EAAAA,CAAE,GAE/D9B,MAAOC,GAAAA,CACNC,QAAQC,MAAMF,GACdkF,EAAWS,QAAO,CAChBhE,QAAS,2BAA6B3B,EAAI2B,QAC1CiE,WAAY,uBACZI,SAAU,EAAA,CAAA,EAEZnB,EAAajF,IAAI,GAAE,GAGnBqG,EAAQ,IAAA,CACZH,GAAKC,GAAO,QAAUvI,CAAK,CAAA,EAGvB0I,EAAS,CACbC,KAAM,UACNjE,MAAO,WACPkE,iBAAkB,eAClBC,kBAAmB,UACnBC,KAAM,kFACNC,SAAWC,GAAAA,CACLA,GACFP,MAKAQ,EAAaC,GAAAA,QAwBCD,EAAWd,QAAQO,CAAAA,SA6C7BS,MAAM,kFAAA,CAAkF,QAGxFA,CAAAA,MAAM,0EAAyE"}