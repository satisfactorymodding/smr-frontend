{"version":3,"file":"5.CHRLZDbG.js","sources":["../../../../../../src/routes/admin/satisfactory-versions/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n  import { getContextClient, queryStore } from '@urql/svelte';\n  import {\n    CreateSatisfactoryVersionDocument,\n    DeleteSatisfactoryVersionDocument,\n    GetSatisfactoryVersionsDocument,\n    UpdateSatisfactoryVersionDocument,\n    type GetSatisfactoryVersionsQuery\n  } from '$lib/generated';\n  import { Accordion, AccordionItem, getToastStore } from '@skeletonlabs/skeleton';\n\n  type SatisfactoryVersion = GetSatisfactoryVersionsQuery['getSatisfactoryVersions'][number];\n\n  const client = getContextClient();\n\n  const panels = {};\n  const versionFields = {};\n\n  const satisfactoryVersionsQuery = queryStore({\n    query: GetSatisfactoryVersionsDocument,\n    client\n  });\n\n  $: satisfactoryVersions = $satisfactoryVersionsQuery.data?.getSatisfactoryVersions || [];\n\n  const toastStore = getToastStore();\n\n  function newSatisfactoryVersion() {\n    if (!satisfactoryVersions.find((satisfactoryVersion) => satisfactoryVersion.id < 0)) {\n      const satisfactoryVersion = { id: -1, version: 0, engine_version: '4.26' } as SatisfactoryVersion;\n      satisfactoryVersions.push(satisfactoryVersion);\n      satisfactoryVersions = satisfactoryVersions;\n      setTimeout(() => {\n        panels[satisfactoryVersion.id].setOpen(true);\n        const field = versionFields[satisfactoryVersion.id];\n        field.focus();\n        const input = field.getElement().querySelectorAll('input')[0] as HTMLInputElement;\n        input.select();\n      }, 0);\n    } else {\n      panels[satisfactoryVersions[satisfactoryVersions.length - 1].id].setOpen(true);\n      versionFields[satisfactoryVersions[satisfactoryVersions.length - 1].id].focus();\n    }\n  }\n\n  async function satisfactoryVersionChange(satisfactoryVersion: SatisfactoryVersion) {\n    if (satisfactoryVersion.version === 0) {\n      return;\n    }\n\n    console.log(satisfactoryVersion);\n\n    let success = false;\n    if (satisfactoryVersion.id < 0) {\n      // Create new satisfactory version & update satisfactoryVersion.id with new DB id or re-fetch all satisfactory versions\n      try {\n        const result = await client\n          .mutation(CreateSatisfactoryVersionDocument, {\n            satisfactoryVersion: {\n              version: satisfactoryVersion.version,\n              engine_version: satisfactoryVersion.engine_version\n            }\n          })\n          .toPromise();\n        if (result.data) {\n          satisfactoryVersion.id = result.data.createSatisfactoryVersion.id;\n          success = true;\n        }\n      } catch (err) {\n        console.log(err);\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to create Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    } else {\n      // Update existing satisfactory version\n      try {\n        success =\n          (\n            await client\n              .mutation(UpdateSatisfactoryVersionDocument, {\n                id: satisfactoryVersion.id,\n                satisfactoryVersion: {\n                  version: satisfactoryVersion.version,\n                  engine_version: satisfactoryVersion.engine_version\n                }\n              })\n              .toPromise()\n          ).data.updateSatisfactoryVersion != null;\n      } catch {\n        // nothing\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to update Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    }\n\n    toastStore.trigger({\n      message: `Satisfactory version '${satisfactoryVersion.version}' saved!`,\n      background: 'variant-filled-success',\n      timeout: 2000\n    });\n  }\n\n  async function deleteSatisfactoryVersion(satisfactoryVersion: SatisfactoryVersion) {\n    if (!(satisfactoryVersion.id < 0)) {\n      // Remove satisfactory version\n      let success = false;\n      try {\n        const result = await client\n          .mutation(DeleteSatisfactoryVersionDocument, { satisfactoryVersionID: satisfactoryVersion.id })\n          .toPromise();\n        success = result.data.deleteSatisfactoryVersion;\n        if (success) {\n          satisfactoryVersions = satisfactoryVersions.filter((version) => version.id !== satisfactoryVersion.id);\n        }\n      } catch {\n        success = false;\n      }\n      if (!success) {\n        toastStore.trigger({\n          message: `Failed to remove Satisfactory version '${satisfactoryVersion.version}'!`,\n          background: 'variant-filled-error',\n          timeout: 2000\n        });\n        return;\n      }\n    }\n\n    toastStore.trigger({\n      message: `Satisfactory version '${satisfactoryVersion.version}' removed!`,\n      background: 'variant-filled-success',\n      timeout: 2000\n    });\n  }\n\n  function onDeleteClick(e: Event, satisfactoryVersion: SatisfactoryVersion) {\n    e.stopPropagation();\n    deleteSatisfactoryVersion(satisfactoryVersion);\n  }\n</script>\n\n<h1>Satisfactory Versions</h1>\n\n<div class=\"card\">\n  {#if $satisfactoryVersionsQuery.fetching}\n    <h1>Loading satisfactory versions...</h1>\n  {:else if $satisfactoryVersionsQuery.error}\n    <h1>Failed to load satisfactory versions: {$satisfactoryVersionsQuery.error.message}</h1>\n  {:else}\n    <Accordion>\n      {#each satisfactoryVersions as satisfactoryVersion}\n        <AccordionItem>\n          <svelte:fragment slot=\"summary\">{satisfactoryVersion.version}</svelte:fragment>\n          <svelte:fragment slot=\"content\">\n            <div>\n              <div>Game CL#</div>\n              <input\n                type=\"text\"\n                class=\"input p-2\"\n                bind:value={satisfactoryVersion.version}\n                placeholder=\"Version\"\n                bind:this={versionFields[satisfactoryVersion.id]}\n                on:change={() => satisfactoryVersionChange(satisfactoryVersion)} />\n              <div>Engine Version</div>\n              <input\n                type=\"text\"\n                class=\"input p-2\"\n                bind:value={satisfactoryVersion.engine_version}\n                placeholder=\"Engine version\"\n                on:change={() => satisfactoryVersionChange(satisfactoryVersion)} />\n            </div>\n\n            <button class=\"variant-ghost-error btn\" on:click={(e) => onDeleteClick(e, satisfactoryVersion)}>\n              <span>Delete</span>\n            </button>\n          </svelte:fragment>\n        </AccordionItem>\n      {/each}\n    </Accordion>\n\n    <section class=\"p-4\">\n      <button class=\"variant-ghost-primary btn\" on:click={newSatisfactoryVersion}>\n        <span>Add new Satisfactory version</span>\n        <span class=\"material-icons\">add</span>\n      </button>\n    </section>\n  {/if}\n</div>\n\n<style lang=\"postcss\">\n  h1 {\n    @apply my-4 text-4xl font-bold;\n  }\n</style>\n"],"names":["insert_hydration","target","section","anchor","append_hydration","button","ctx","error","message","h1","set_data","t1","t1_value","t_value","version","dirty","t","div2","div0","input0","set_input_value","div1","input1","engine_version","value","length","i","each_blocks","fetching","div","client","getContextClient","panels","versionFields","satisfactoryVersionsQuery","queryStore","query","GetSatisfactoryVersionsDocument","toastStore","getToastStore","newSatisfactoryVersion","satisfactoryVersions","find","satisfactoryVersion","id","setOpen","focus","push","setTimeout","field","getElement","querySelectorAll","input","select","async","satisfactoryVersionChange","console","log","success","result","mutation","CreateSatisfactoryVersionDocument","toPromise","data","createSatisfactoryVersion","err","trigger","background","timeout","UpdateSatisfactoryVersionDocument","updateSatisfactoryVersion","deleteSatisfactoryVersion","DeleteSatisfactoryVersionDocument","satisfactoryVersionID","$$invalidate","filter","onDeleteClick","e","stopPropagation","this","$$value","change_handler","change_handler_1","click_handler","$satisfactoryVersionsQuery","getSatisfactoryVersions"],"mappings":"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"}